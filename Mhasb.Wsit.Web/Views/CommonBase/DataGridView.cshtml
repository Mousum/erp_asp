@model  List<Mhasb.Wsit.CustomModel.GridView.DataGridView>
@{
    Layout = "~/Views/Shared/_mhasbLayout.cshtml";
    string[,] headerList = ViewBag.HeaderList;
}


@*@for (int i = 0; i < ViewBag.HeaderCount; i++)
    {
        { @i; }
        @headerList[i];
    }*@

<div class="row clearfix">
    <div class="col-md-12">
        <div class="col-md-3">
            @*<h4>@ViewBag.Title List:</h4*@>
        </div>
        <div class="col-md-6">
        </div>
        <div class="col-md-3 edit-fa">
            <div class="input-group col-md-12">
                <input type="text" class="search-query form-control cstm-input" placeholder="Search" />
                <span class="input-group-btn">
                    <button class="btn btn-danger btn-tag-search" type="button">
                        <i class="fa fa-search"></i>
                    </button>
                </span>
            </div>
        </div>
        <div class="col-md-12">
            <table class="table table-bordered table-responsive table-hover">
                <thead>
                    <tr>
                        @foreach (var m in Model)
                        {
                            <th>@m.Name</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int k = 1; k < 3; k++)
                    {

                        <tr>
                            @foreach (var m in Model)
                            {

                                var name = m.Name;

                                if (m.Type == "text")
                                {
                                    <th><input type="text" name=@name /></th>
                                }
                                else if (@m.Type == "dropdown")
                                {
                                    <th>
                                        <select class="combobox form-control select-option" name="@name">
                                            <option></option>

                                            @foreach (var opt in @m.Options)
                                            {
                                                <option value="@opt.Value">@opt.Name</option>
                                            }
                                        </select>
                                    </th>
                                }

                            }
                            
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<script>
    (function ($) {
        $.widget("custom.combobox", {
            _create: function () {
                this.wrapper = $("<span>")
                  .addClass("custom-combobox")
                  .insertAfter(this.element);

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
            },

            _createAutocomplete: function () {
                var selected = this.element.children(":selected"),
                  value = selected.val() ? selected.text() : "";

                this.input = $("<input>")
                  .appendTo(this.wrapper)
                  .val(value)
                  .attr("title", "")
                  .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                  .autocomplete({
                      delay: 0,
                      minLength: 0,
                      source: $.proxy(this, "_source")
                  })
                  .tooltip({
                      tooltipClass: "ui-state-highlight"
                  });

                this._on(this.input, {
                    autocompleteselect: function (event, ui) {
                        ui.item.option.selected = true;
                        this._trigger("select", event, {
                            item: ui.item.option
                        });
                    },

                    autocompletechange: "_removeIfInvalid"
                });
            },

            _createShowAllButton: function () {
                var input = this.input,
                  wasOpen = false;

                $("<a>")
                  .attr("tabIndex", -1)
                  .attr("title", "Show All Items")
                  .tooltip()
                  .appendTo(this.wrapper)
                  .button({
                      icons: {
                          primary: "ui-icon-triangle-1-s"
                      },
                      text: false
                  })
                  .removeClass("ui-corner-all")
                  .addClass("custom-combobox-toggle ui-corner-right")
                  .mousedown(function () {
                      wasOpen = input.autocomplete("widget").is(":visible");
                  })
                  .click(function () {
                      input.focus();

                      // Close if already visible
                      if (wasOpen) {
                          return;
                      }

                      // Pass empty string as value to search for, displaying all results
                      input.autocomplete("search", "");
                  });
            },

            _source: function (request, response) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                response(this.element.children("option").map(function () {
                    var text = $(this).text();
                    if (this.value && (!request.term || matcher.test(text)))
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }));
            },

            _removeIfInvalid: function (event, ui) {

                // Selected an item, nothing to do
                if (ui.item) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                  valueLowerCase = value.toLowerCase(),
                  valid = false;
                this.element.children("option").each(function () {
                    if ($(this).text().toLowerCase() === valueLowerCase) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if (valid) {
                    return;
                }

                // Remove invalid value
                this.input
                  .val("")
                  .attr("title", value + " didn't match any item")
                  .tooltip("open");
                this.element.val("");
                this._delay(function () {
                    this.input.tooltip("close").attr("title", "");
                }, 2500);
                this.input.autocomplete("instance").term = "";
            },

            _destroy: function () {
                this.wrapper.remove();
                this.element.show();
            }
        });
    })(jQuery);

    $(function () {
        $(".combobox").combobox();
        $("#toggle").click(function () {
            $(".combobox").toggle();
        });

        $("#combobox1").combobox();
        $("#toggle1").click(function () {
            $("#combobox1").toggle();
        });

    });
</script>